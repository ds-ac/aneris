(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/examples/reliable_communication/examples/messages_in_order_loop/messages_in_order_loop_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib.serialization Require Import serialization_code.
From aneris.examples.reliable_communication Require Import client_server_code.

Definition int_s := int_serializer.

Definition str_s := string_serializer.

Definition echo_loop : val :=
  rec: "echo_loop" "c" :=
  let: "req" := recv "c" in
  send "c" (strlen "req");;
  "echo_loop" "c".

Definition accept_loop : val :=
  位: "s",
  letrec: "loop" <> :=
    let: "c" := Fst (accept "s") in
    Fork (echo_loop "c");;
    "loop" #() in
    "loop" #().

Definition server : val :=
  位: "srv",
  let: "s" := make_server_skt int_s str_s "srv" in
  server_listen "s";;
  Fork (accept_loop "s").

Definition client : val :=
  位: "clt" "srv" "s1" "s2",
  let: "s" := make_client_skt str_s int_s "clt" in
  let: "c" := connect "s" "srv" in
  send "c" "s1";;
  send "c" "s2";;
  let: "m1" := recv "c" in
  let: "m2" := recv "c" in
  assert: (("m1" = (strlen "s1")) && ("m2" = (strlen "s2"))).

Definition client_0 : val :=
  位: "clt" "srv", client "clt" "srv" #"carpe" #"diem".
