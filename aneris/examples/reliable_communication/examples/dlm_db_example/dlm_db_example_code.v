(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/reliable_communication/examples/dlm_db_example/dlm_db_example_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib.serialization Require Import serialization_code.
From aneris.examples.reliable_communication.lib.dlm Require Import dlm_code.
From aneris.examples.reliable_communication.lib.ddb Require Import ddb_code.

Definition do_transaction : val :=
  λ: "lk" "wr",
  dlock_acquire "lk";;
  "wr" #"x" #1;;
  "wr" #"y" #37;;
  dlock_release "lk".

Definition repeat_read_until : val :=
  λ: "lk" "rd" "k" "v",
  letrec: "loop" <> :=
    dlock_acquire "lk";;
    let: "res" := "rd" "k" in
    dlock_release "lk";;
    (if: "res" = (SOME "v")
     then  #()
     else  #() (* unsafe (fun () -> Unix.sleepf 2.0); loop () *);;
           "loop" #()) in
    "loop" #().

Definition do_read : val :=
  λ: "lk" "rd",
  repeat_read_until "lk" "rd" #"x" #1;;
  #();;
  dlock_acquire "lk";;
  let: "vy" := "rd" #"y" in
  dlock_release "lk";;
  assert: ("vy" = (SOME #37)).

Definition node0 : val :=
  λ: "clt_addr00" "clt_addr01" "dlock_srv_addr" "db_srv_addr",
  let: "lk_chan" := dlock_subscribe_client "clt_addr00" "dlock_srv_addr" in
  let: "db_funs" := install_proxy int_serializer "clt_addr01" "db_srv_addr" in
  let: "wr" := Fst "db_funs" in
  let: "_rd" := Snd "db_funs" in
  do_transaction "lk_chan" "wr".

Definition node1 : val :=
  λ: "clt_addr10" "clt_addr11" "dlock_srv_addr" "db_srv_addr",
  let: "lk_chan" := dlock_subscribe_client "clt_addr10" "dlock_srv_addr" in
  let: "db_funs" := install_proxy int_serializer "clt_addr11" "db_srv_addr" in
  let: "_wr" := Fst "db_funs" in
  let: "rd" := Snd "db_funs" in
  do_read "lk_chan" "rd".
