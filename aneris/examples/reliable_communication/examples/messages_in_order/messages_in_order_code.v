(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/reliable_communication/examples/messages_in_order/messages_in_order_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib.serialization Require Import serialization_code.
From aneris.examples.reliable_communication Require Import client_server_code.

Definition server : val :=
  λ: "srv",
  #() (* unsafe (fun () -> Printf.printf "Install server.\n%!"); *);;
  #() (* unsafe (fun () -> Printf.printf "Creating socket.\n%!"); *);;
  let: "s" := make_server_skt int_serializer int_serializer "srv" in
  #() (* unsafe (fun () -> Printf.printf "Start listening.\n%!"); *);;
  server_listen "s";;
  let: "new_conn" := accept "s" in
  let: "c" := Fst "new_conn" in
  let: "_clt" := Snd "new_conn" in
  let: "_r1" := let: "m" := recv "c" in
                send "c" "m" in
  let: "_r2" := let: "m" := recv "c" in
                send "c" "m" in
  let: "_r3" := let: "m" := recv "c" in
                send "c" "m" in
  #().

Definition client : val :=
  λ: "clt" "srv",
  #() (* unsafe (fun () -> Printf.printf "Install client.\n%!"); *);;
  #() (* unsafe (fun () -> Printf.printf "Creating socket.\n%!"); *);;
  let: "s" := make_client_skt int_serializer int_serializer "clt" in
  #() (* unsafe (fun () -> Printf.printf "Connecting to the server.\n%!"); *);;
  let: "c" := connect "s" "srv" in
  send "c" #1;;
  send "c" #2;;
  send "c" #3;;
  let: "m1" := recv "c" in
  let: "m2" := recv "c" in
  let: "m3" := recv "c" in
  assert: (("m1" = #1) && (("m2" = #2) && ("m3" = #3))).
