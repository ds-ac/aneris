(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/examples/crdt/oplib/examples/remove_wins_set/remove_wins_set_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib Require Import list_code.
From aneris.aneris_lang.lib.vector_clock Require Import vector_clock_code.
From aneris.aneris_lang.lib.serialization Require Import serialization_code.
From aneris.examples.crdt.oplib Require Import oplib_code.

Definition init_st : val := λ: <>, ([], []).

Definition effect_remove_op : val :=
  λ: "v" "vc" "st",
  let: "contents" := Fst "st" in
  let: "removes" := Snd "st" in
  let: "updated_removes" := ("v", "vc") :: "removes" in
  let: "should_keep_in_contents" := λ: "p",
  (if: (Fst "p") = "v"
   then  let: "vc'" := Snd "p" in
         vect_leq "vc" "vc'"
   else  #true) in
  let: "updated_contents" := list_filter "should_keep_in_contents" "contents" in
  ("updated_contents", "updated_removes").

Definition effect_add_op : val :=
  λ: "v" "vc" "st",
  let: "contents" := Fst "st" in
  let: "removes" := Snd "st" in
  let: "permits_add" := λ: "r",
  (if: (Fst "r") = "v"
   then  let: "vc'" := Snd "r" in
         vect_leq "vc'" "vc"
   else  #true) in
  let: "should_add" := list_fold (λ: "p" "r", "p" && ("permits_add" "r"))
                       #true "removes" in
  let: "updated_contents" := (if: "should_add"
   then  ("v", "vc") :: "contents"
   else  "contents") in
  ("updated_contents", "removes").

Definition effect : val :=
  λ: "msg" "st",
  let: "v" := Fst (Fst "msg") in
  let: "vc" := Snd (Fst "msg") in
  let: "_u" := Snd "msg" in
  match: "v" with
    InjL "w" => effect_add_op "w" "vc" "st"
  | InjR "w" => effect_remove_op "w" "vc" "st"
  end.

Definition rws_crdt : val := λ: <>, (init_st, effect).

Definition rws_init val_ser val_deser : val :=
  λ: "addrs" "rid",
  let: "initRes" := oplib_init (sum_ser val_ser val_ser)
                    (sum_deser val_deser val_deser) "addrs" "rid" rws_crdt in
  let: "get_state" := Fst "initRes" in
  let: "update" := Snd "initRes" in
  ("get_state", "update").
